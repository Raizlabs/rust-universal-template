# From https://github.com/mzabaluev/digest-hash-rs/blob/e9257ee4d6d7af8999c246d4ea6327e7b2f7ade1/.circleci/config.yml

version: 2
jobs:
  cargo_fetch:
    docker:
      - image: rust:latest
    working_directory: /mnt/crate
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-v1-{{ checksum "Cargo.toml" }}-
            - cargo-v1-
      - run: cargo update
      - run: cargo fetch
      - persist_to_workspace:
          root: "."
          paths:
            - Cargo.lock
      - save_cache:
          key: cargo-v1-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
          paths:
            - /usr/local/cargo/registry
            - /usr/local/cargo/git
  test:
    docker:
      - image: rust:latest
    working_directory: /mnt/crate
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v1-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Print version information
          command: rustc --version; cargo --version
      - run:
          name: Build and test
          command: cargo test --verbose --frozen
          environment:
            # Need this for the coverage run
            RUSTFLAGS: "-C link-dead-code"
      - run:
          name: Prune the output files
          command: |
            for file in target/debug/* target/debug/.??*; do
              [ -d $file -o ! -x $file ] && rm -r $file
            done
      - persist_to_workspace:
          root: "."
          paths:
            - target/debug/*
  test_release:
    docker:
      - image: rust:latest
    working_directory: /mnt/crate
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v1-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Print version information
          command: rustc --version; cargo --version
      - run:
          name: Build and test in release profile
          command: cargo test --verbose --frozen --release
  build:
    docker:
      - image: rust:latest
    working_directory: /mnt/crate
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v1-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Print version information
          command: rustc --version; cargo --version
      - run:
          name: Build generic and "java" feature
          # The "apple" feature cannot compile on Linux
          command: cargo build --verbose --frozen --features "java"
  test_nightly:
    docker:
      - image: rustlang/rust:nightly
    working_directory: /mnt/crate
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - cargo-v1-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Print version information
          command: rustc --version; cargo --version
      - run:
          name: Build and test with nightly Rust
          command: cargo test --verbose --frozen

  macos-rustup:
    macos:
      xcode: "9.3.0"
    shell: /bin/bash --login -eo pipefail
    working_directory: /Users/distiller/project
    steps:
      - checkout
      - restore_cache:
          keys:
            - mac-cargo-v4-{{ checksum "Cargo.toml" }}-
            - mac-cargo-v4-
            - mac-cargo-v3-
      - run:
          name: Install Rust
          command: |
            cargo --version || curl https://sh.rustup.rs -sSf | sh -s -- -y
      - run:
          name: Install Toolchain and Targets
          command: |
            cargo lipo --version || cargo install cargo-lipo
            rustup target add aarch64-apple-ios armv7-apple-ios x86_64-apple-ios i386-apple-ios 
            rustup toolchain install nightly
            rustup target add aarch64-apple-ios armv7-apple-ios x86_64-apple-ios i386-apple-ios --toolchain nightly
            rustup default nightly
      - run: rustup update
      - run: cargo update
      - run: cargo fetch
      - persist_to_workspace:
          root: "."
          paths:
            - Cargo.lock
      - save_cache:
          key: mac-cargo-v4-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
          paths:
            - /Users/distiller/.bash_profile
            - /Users/distiller/.cargo
            - /Users/distiller/.rustup
  macos-test-java:
    macos:
      xcode: "9.3.0"
    shell: /bin/bash --login -eo pipefail
    working_directory: /Users/distiller/project
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - mac-cargo-v4-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Build & Run Java example
          command: |
            ./build-run-java.sh

  test-xcode-9-3:
    macos:
      xcode: "9.3.0"
    shell: /bin/bash --login -eo pipefail
    working_directory: /Users/distiller/project
    steps:
      - checkout
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - mac-cargo-v4-{{ checksum "Cargo.toml" }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Test macOS Framework
          command: |
            xcodebuild -project Example.xcodeproj -scheme "ExampleTests (macOS)" clean test | xcpretty -c
      - run:
          name: Test iOS Framework
          command: |
            xcodebuild -project Example.xcodeproj -scheme "ExampleTests (iOS)" -destination 'platform=iOS Simulator,name=iPhone X,OS=11.3' clean test | xcpretty -c
      - run:
          name: Build iOS Example App
          command: |
            cd Examples/iOS
            xcodebuild -project ExampleApp.xcodeproj -scheme "ExampleApp" -destination 'platform=iOS Simulator,name=iPhone X,OS=11.3' clean build | xcpretty -c


  # coverage:
  #   docker:
  #     - image: ragnaroek/kcov:v33
  #       entrypoint: /bin/bash
  #   working_directory: /mnt/crate
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: "."
  #     - run: mkdir target/coverage
  #     - run:
  #         name: Rerun the tests collecting coverage
  #         command: |
  #           for file in ./target/debug/*; do
  #             if test -x $file; then
  #               kcov --verify --exclude-pattern=tests \
  #                   target/coverage/$(basename $file) \
  #                 $file --quiet
  #             fi
  #           done
  #           kcov --merge target/coverage-merged target/coverage/*
  #     - store_artifacts:
  #         path: target/coverage
  #         destination: coverage
  #     - store_artifacts:
  #         path: target/coverage-merged
  #         destination: coverage-merged
  #     - persist_to_workspace:
  #         root: "."
  #         paths:
  #           - target/coverage
  # codecov_upload:
  #   docker:
  #     - image: buildpack-deps:curl
  #   working_directory: /mnt/crate
  #   steps:
  #     # Codecov uploader needs the source and binaries
  #     # exactly as everything was during the test run.
  #     - checkout
  #     - attach_workspace:
  #         at: "."
  #     - run:
  #         name: Upload to Codecov
  #         command: bash <(curl -s https://codecov.io/bash)

workflows:
  version: 2
  test_macos:
    jobs:
      - macos-rustup
      - test-xcode-9-3:
          requires:
            - macos-rustup
      - macos-test-java:
          requires:
            - macos-rustup
  test_linux:
    jobs:
      - cargo_fetch
      - test:
          requires:
            - cargo_fetch
      - test_release:
          requires:
            - cargo_fetch
      - build:
          requires:
            - cargo_fetch
      - test_nightly:
          requires:
            - cargo_fetch
      # - coverage:
      #     requires:
      #       - test
      # - codecov_upload:
      #     requires:
      #       - coverage